<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>个人项目-谷歌浏览器插件-视频进度条标签</title>
      <link href="/2019/06/20/%E9%A1%B9%E7%9B%AE-%E8%B0%B7%E6%AD%8C%E6%8F%92%E4%BB%B6/"/>
      <url>/2019/06/20/%E9%A1%B9%E7%9B%AE-%E8%B0%B7%E6%AD%8C%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="B站进度条高亮注释"><a href="#B站进度条高亮注释" class="headerlink" title="B站进度条高亮注释"></a>B站进度条高亮注释</h1><p><a href="https://github.com/csigto123/bilibili-video-highlight-bookmaks" target="_blank" rel="noopener">项目Github地址</a></p><h4 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h4><p>这是一个谷歌插件，能给B站视频的进度条进行标点和注释。</p><h4 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h4><p>下载crx文件，拖进浏览器就可以安装了。</p><p><del>谷歌应用商店安装：上传谷歌商店要$5,暂时不上了。</del></p><h4 id="功能："><a href="#功能：" class="headerlink" title="功能："></a>功能：</h4><p>添加–a键，删除-d键+鼠标选中，增加注释-s键+鼠标选中，修改注释-s键+鼠标选中；</p><h5 id="1-添加高亮点："><a href="#1-添加高亮点：" class="headerlink" title="1.添加高亮点："></a>1.添加高亮点：</h5><p>拖动进度条到达想要的位置，点击键盘上的A触发标点。</p><p><img src="https://cdn.jsdelivr.net/gh/csigto123/CDN-resources@v0.3/img/readmeimg/GIF2.gif" alt="GIFchange"></p><a id="more"></a><h5 id="2-添加高亮点注释："><a href="#2-添加高亮点注释：" class="headerlink" title="2.添加高亮点注释："></a>2.添加高亮点注释：</h5><p>移动鼠标到高亮点处，点击键盘的S，弹出输入框，输入注释，点击确认添加。</p><p><img src="https://cdn.jsdelivr.net/gh/csigto123/CDN-resources@v0.3/img/readmeimg/GIFset.gif" alt="GIFchange"></p><h5 id="3-删除高亮点："><a href="#3-删除高亮点：" class="headerlink" title="3.删除高亮点："></a>3.删除高亮点：</h5><p>移动鼠标到高亮点处，点击键盘的D，即可删除。</p><p><img src="https://cdn.jsdelivr.net/gh/csigto123/CDN-resources@v0.3/img/readmeimg/GIFdele.gif" alt="GIFchange"></p><h5 id="4-改变已有注释："><a href="#4-改变已有注释：" class="headerlink" title="4.改变已有注释："></a>4.改变已有注释：</h5><p>移动鼠标到高亮点处，点击键盘的S，弹出输入框，输入新注释，点击确认添加。</p><p><img src="https://cdn.jsdelivr.net/gh/csigto123/CDN-resources@v0.3/img/readmeimg/GIFchange.gif" alt="GIFchange"></p><h5 id="5-未完后续添加其他功能："><a href="#5-未完后续添加其他功能：" class="headerlink" title="5.未完后续添加其他功能："></a>5.未完后续添加其他功能：</h5><p>搬砖后有空就写吧。</p><h4 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h4><p>关于存储的数据，暂时还不支持导出数据，<strong>卸载插件，会清空数据</strong>，如果想备份，可以到插件的安装目录手动将数据复制备份。</p><p>互动视频无法使用。</p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
          <category> 谷歌插件 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>常见命名中英文对照</title>
      <link href="/2019/03/17/%E5%B8%B8%E8%A7%81%E5%91%BD%E5%90%8D%E4%B8%AD%E8%8B%B1%E6%96%87%E5%AF%B9%E7%85%A7/"/>
      <url>/2019/03/17/%E5%B8%B8%E8%A7%81%E5%91%BD%E5%90%8D%E4%B8%AD%E8%8B%B1%E6%96%87%E5%AF%B9%E7%85%A7/</url>
      
        <content type="html"><![CDATA[<h3 id="常见命名中英文对照"><a href="#常见命名中英文对照" class="headerlink" title="常见命名中英文对照"></a>常见命名中英文对照</h3><table><thead><tr><th align="center">英语</th><th align="center">中文</th></tr></thead><tbody><tr><td align="center">container</td><td align="center">最外层容器</td></tr><tr><td align="center">layout</td><td align="center">布局</td></tr><tr><td align="center">header,head</td><td align="center">页头</td></tr><tr><td align="center">foot, footer</td><td align="center">页脚</td></tr><tr><td align="center">title</td><td align="center">标题</td></tr><tr><td align="center">summary</td><td align="center">总结</td></tr><tr><td align="center">search</td><td align="center">搜索</td></tr><tr><td align="center">list</td><td align="center">列表</td></tr><tr><td align="center">banner</td><td align="center">广告条</td></tr><tr><td align="center">menu</td><td align="center">菜单</td></tr><tr><td align="center">nav</td><td align="center">导航</td></tr><tr><td align="center">未完……</td><td align="center">未完……</td></tr></tbody></table><a id="more"></a>]]></content>
      
      
      <categories>
          
          <category> 前端总结 </category>
          
          <category> 常见命名中英文对照 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>前端笔记--js基础笔记</title>
      <link href="/2018/12/30/js%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/12/30/js%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript基础"><a href="#JavaScript基础" class="headerlink" title="JavaScript基础"></a>JavaScript基础</h1><h2 id="变量的命名规则和规范"><a href="#变量的命名规则和规范" class="headerlink" title="变量的命名规则和规范"></a>变量的命名规则和规范</h2><p><strong>规则</strong> : ( 必须遵守的,不遵守会报错 ) </p><ul><li><p>由<strong>字母</strong>、<strong>数字</strong>、<strong>下划线</strong>、<strong>$符号</strong>组成 ; </p></li><li><p><strong>不能以数字开头</strong></p></li><li><p>区分<strong>大小写</strong></p></li><li><p><strong>不能</strong>是<strong>关键字</strong>和<strong>保留字</strong> (不用死记 , 慢慢就见多了)</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//关键字：对于js来说有特殊意义的一些单词，常见关键字：略。</span></span><br><span class="line"><span class="comment">//保留字：js保留了一些单词，这些单词现在不用，但是以后要用。常见保留字：略</span></span><br></pre></td></tr></table></figure><a id="more"></a><p><strong>规范</strong> :  (建议遵守的  不遵守不会报错)</p><ul><li><p>变量名必须<strong>有意义</strong></p></li><li><p>遵守<strong>驼峰</strong>命名法。 首字母小写,后面单词的首字母需要大写! </p><p>myName,   userPassword</p></li></ul><h2 id="JS数据类型-值类型与引用类型"><a href="#JS数据类型-值类型与引用类型" class="headerlink" title="JS数据类型-值类型与引用类型"></a>JS数据类型-值类型与引用类型</h2><blockquote><p>简单（ 基本 ）数据类型：<code>number</code>、<code>string</code>、<code>boolean</code>、<code>undefined（声明未赋值）</code>、<code>null（空类型）</code></p></blockquote><blockquote><p>复杂（引用）数据类型：<code>Array</code>、<code>function</code>, <code>Object</code></p></blockquote><blockquote><p>简单数据类型也叫值类型，复杂数据类型也叫引用数据类型，这主要是根据内存存储方式来区分的。 </p></blockquote><blockquote><p>变量在存储简单类型的时候，存的是值本身（值类型）</p></blockquote><blockquote><p>变量在存储复杂数据类型的时候，存的是引用，也叫地址（类型）</p></blockquote><h3 id="值类型的存储"><a href="#值类型的存储" class="headerlink" title="值类型的存储"></a>值类型的存储</h3><blockquote><p>变量存储数据的时候，存储的直接就是这个值本身。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">11</span>;</span><br><span class="line"><span class="keyword">var</span> num1 = num;</span><br><span class="line">num = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num);</span><br><span class="line"><span class="built_in">console</span>.log(num1);</span><br></pre></td></tr></table></figure><blockquote><p>简单类型进行赋值的时候，赋值的是值本身。</p></blockquote><h3 id="引用类型的存储"><a href="#引用类型的存储" class="headerlink" title="引用类型的存储"></a>引用类型的存储</h3><blockquote><p>复杂类型： 变量不会存这个对象，对象随机存在内存中，会有一个地址，变量存储的仅仅是这个对象的地址。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name:<span class="string">"zs"</span>,</span><br><span class="line">  age:<span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj1 = obj;</span><br><span class="line">obj1.name = <span class="string">"ls"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj.name);</span><br><span class="line"><span class="built_in">console</span>.log(obj1.name);</span><br><span class="line"></span><br><span class="line"><span class="comment">////把obj存的地址给了obj1  所以obj和obj1都存放了这个对象的地址，</span></span><br></pre></td></tr></table></figure><blockquote><p>结论：简单类型存储的是值本身，复杂类型存储的是地址，引入如果把第一个对象赋值给另一个变量，此时两个变量会指向同一个对象。</p></blockquote><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><h3 id="转数字类型"><a href="#转数字类型" class="headerlink" title="转数字类型"></a>转数字类型</h3><p><strong>方法一：Number(值)</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">'55'</span>));</span><br><span class="line"><span class="built_in">Number</span>()可以把任意值转换成数值类型，但是如果字符串中有不是数字的字符，返回<span class="literal">NaN</span></span><br></pre></td></tr></table></figure><p><strong>方法二：parseInt(值)</strong> 和 <strong>parseFloat</strong>(值)</p><ol><li><p>parseInt(值)  把整数或者小数都转化为整数;</p><ul><li><p>parseInt(值) : parse:解析 int:整数/整型  =&gt; 数字类型</p></li><li><p>如果是整数 =&gt; 整数</p></li><li><p>如果是浮点数 =&gt; 整数 (小点数以后全部省略)</p></li></ul></li><li><p>parseFloat(值) 把整数转化整数,把小数转化为小数</p><ul><li><p>float : 浮点数 =&gt; 数字类型</p></li><li><p>如果是整数 =&gt; 整数</p></li><li><p>如果是浮点数 =&gt;浮点数</p></li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="built_in">parseInt</span>(<span class="string">"12"</span>);  <span class="comment">// 12</span></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="built_in">parseInt</span>(<span class="string">"12.3"</span>); <span class="comment">//12</span></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="built_in">parseFloat</span>(<span class="string">"12"</span>); <span class="comment">//12</span></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="built_in">parseFloat</span>(<span class="string">"12.3"</span>);<span class="comment">//12.3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="built_in">parseInt</span>(<span class="string">"12.3abc"</span>);  <span class="comment">// 返回12，如果第一个字符是数字会解析知道遇到非数字结束</span></span><br><span class="line"><span class="keyword">var</span> num2 = <span class="built_in">parseInt</span>(<span class="string">"abc123"</span>);   <span class="comment">// 返回NaN，如果第一个字符不是数字或者符号就返回NaN</span></span><br></pre></td></tr></table></figure><p><strong>方法三：算术运算    (最常用)</strong>  </p><ul><li>+ (正) -0</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'500'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(+str);<span class="comment">// 取正</span></span><br><span class="line"><span class="built_in">console</span>.log(-str);<span class="comment">// 取负</span></span><br><span class="line"><span class="built_in">console</span>.log(str - <span class="number">0</span>);  +<span class="number">0</span>呢???拼接</span><br></pre></td></tr></table></figure><h3 id="转字符串类型"><a href="#转字符串类型" class="headerlink" title="转字符串类型"></a>转字符串类型</h3><p><strong>方法一：String ( )</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">5</span>;</span><br><span class="line">num = <span class="built_in">String</span>(num);</span><br><span class="line"><span class="built_in">console</span>.log(num);</span><br></pre></td></tr></table></figure><p><strong>方法二：toString ( )</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">5</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num.toString());<span class="comment">// 把数值5变成字符串5</span></span><br><span class="line"><span class="comment">//将来所有的数据都会有toString()方法，除了null和undefined</span></span><br></pre></td></tr></table></figure><p><strong>方法三：拼串，(最常用)</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">5</span>;</span><br><span class="line">num = num + <span class="string">""</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num);</span><br></pre></td></tr></table></figure><h3 id="转换成布尔类型"><a href="#转换成布尔类型" class="headerlink" title="转换成布尔类型"></a>转换成布尔类型</h3><blockquote><p>所有的值都可以转换成布尔类型</p></blockquote><blockquote><p>其中 <code>0</code>, <code>&quot;&quot;</code>, <code>undefined</code>，<code>null</code>，  <code>NaN</code>，这几个值会转换成false，其他值都会转换成true</p></blockquote><blockquote><p><strong>这个代表的五大基本类型</strong></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 没有值 =&gt; false</span></span><br><span class="line"><span class="comment">// 有值 =&gt; true</span></span><br><span class="line"><span class="comment">// number string undefined null </span></span><br><span class="line"><span class="comment">//  0      ''    </span></span><br><span class="line"></span><br><span class="line">注意 : </span><br><span class="line">   <span class="number">1.</span> <span class="string">'false'</span> 它是字符串 </span><br><span class="line">   <span class="number">2.</span>  <span class="literal">NaN</span>  =&gt; <span class="literal">false</span></span><br></pre></td></tr></table></figure><p><strong>方法Boolean()</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="number">1</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="number">0</span>));</span><br></pre></td></tr></table></figure><h2 id="分支语句-三元运算符"><a href="#分支语句-三元运算符" class="headerlink" title="分支语句 : 三元运算符"></a>分支语句 : 三元运算符</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">条件 ? 值<span class="number">1</span> : 值<span class="number">2</span>    <span class="comment">/*或者*/</span>   条件 ? 表达式<span class="number">1</span> : 表达式<span class="number">2</span>  </span><br><span class="line"><span class="number">1.</span> 三元运算符会得到一个结果，结果根据<span class="string">`条件`</span>来确定。</span><br><span class="line"><span class="number">2.</span> 如果<span class="string">`条件`</span>的值为<span class="literal">true</span>，会返回表达式<span class="number">1</span>的值/值<span class="number">1</span></span><br><span class="line"><span class="number">3.</span> 如果<span class="string">`条件`</span>的值为<span class="literal">false</span>，会返回表达式<span class="number">2</span>的值/值<span class="number">2</span></span><br></pre></td></tr></table></figure><h2 id="分支语句-switch语句"><a href="#分支语句-switch语句" class="headerlink" title="分支语句 :switch语句"></a>分支语句 :switch语句</h2><blockquote><p>if..else适用于范围的判断，switch..case适用于具体的值的判断</p></blockquote><p>语法格式 : </p><blockquote><p>switch case break default </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (变量) &#123;</span><br><span class="line">  <span class="keyword">case</span> 值<span class="number">1</span>:</span><br><span class="line">    语句<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> 值<span class="number">2</span>:</span><br><span class="line">    语句<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> 值<span class="number">3</span>:</span><br><span class="line">    语句<span class="number">3</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  …</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    默认语句;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意 : </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">break</span>可以省略，如果省略，代码会继续执行下一个<span class="keyword">case</span></span><br><span class="line"><span class="keyword">switch</span> 语句在比较值时使用的是全等操作符, 因此不会发生类型转换（例如，字符串<span class="string">'10'</span> 不等于数值 <span class="number">10</span>）</span><br></pre></td></tr></table></figure><h3 id="break和continue"><a href="#break和continue" class="headerlink" title="break和continue"></a>break和continue</h3><blockquote><p>break:    结束/中止for循环</p><p>​         立即跳出当前整个循环，即循环结束，开始执行循环后面的内容（直接跳传出大括号）</p><p>​         一般写在打印之后</p><p>continue:   结束本次循环,进行下一个循环</p><p>​        立即跳出当前循环，继续下一次循环（跳到i++的地方） (放打印代码前面)</p><p>​        一般写在打印之前、</p></blockquote><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><blockquote><p>Arrar() 里面放一个值,代表的是创建一个长度为4的空数组<br>var arr3 = new Array(4);<br>console.log(arr3);</p></blockquote><blockquote><p>var arr3 = [4]; // 创建一个数组,元素只有1个,,,元素是4</p></blockquote><h3 id="数组常用方法总结"><a href="#数组常用方法总结" class="headerlink" title="数组常用方法总结"></a>数组常用方法总结</h3><p>略</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><blockquote><p>break : 中止 for循环<br>return 中止函数 并且返回一个值</p></blockquote><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><blockquote><p>全局变量：在函数外，script标签内声明的变量就是全局变量，全局变量在任何地方都能访问的到。<br>局部变量：在函数中声明的变量，就是局部变量，局部变量只有在当前函数体内能够访问。<br>隐式全局变量：没有使用var定义的变量也是全局变量，叫做隐式全局变量。(不要使用)</p></blockquote><h3 id="预解析"><a href="#预解析" class="headerlink" title="预解析"></a>预解析</h3><blockquote><p>总结 : </p></blockquote><blockquote><ol><li>var 声明的变量,,,把声明提升到当前作用域的最前面赋值不提升</li><li>函数整体提升到当前作用域的最前面</li><li>函数同名,,后者会覆盖前者</li><li>变量 和 函数 同名,,函数优先</li><li>代码一行一行执行</li></ol></blockquote><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><blockquote><p>匿名函数  没有函数名的函数自执行/自调用(1次)<br>结构 : ( 匿名函数 ) ()<br>第一个括号 : 匿名函数保护起来<br>第二个小括号 : 调用</p></blockquote><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><blockquote><p>创建对象 =&gt; 4种方式<br>单独创建对象 =&gt; 2种 字面量 构造函数Object<br>批量创建对象 =&gt; 2种 工厂函数  自定义构造函数</p></blockquote><h3 id="单独创建对象"><a href="#单独创建对象" class="headerlink" title="单独创建对象"></a>单独创建对象</h3><h4 id="字面量创建对象"><a href="#字面量创建对象" class="headerlink" title="字面量创建对象"></a>字面量创建对象</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字面量创建对象</span></span><br><span class="line"><span class="comment">// var 对象名 = &#123;  键值对 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字面量 =&gt; 直接量 =&gt;一眼就能看出来什么类型</span></span><br><span class="line"><span class="comment">// 12 'abc'  true [] &#123;&#125; function</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 创建一个空对象</span></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(obj1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 创建有内容的对象</span></span><br><span class="line"><span class="keyword">var</span>  obj2 = &#123;</span><br><span class="line">  name : <span class="string">'哈哈'</span>,</span><br><span class="line">  age : <span class="number">18</span>,</span><br><span class="line">  hobby : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 哈哈爱代码</span></span><br><span class="line">    <span class="built_in">console</span>.log( <span class="keyword">this</span>.name + <span class="string">'爱代码'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// . '的' </span></span><br><span class="line"><span class="comment">// obj2.hobby();</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> stu1 = &#123;</span><br><span class="line">  name :<span class="string">'张三'</span>,</span><br><span class="line">  age : <span class="number">18</span>,</span><br><span class="line">  sayHi: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'大家好,我是'</span>+ <span class="keyword">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//1. this 在函数内部 才有意义</span></span><br><span class="line"><span class="comment">//2. 指向 : 谁调用this所在的这个函数, this就指向哪个对象</span></span><br><span class="line"><span class="built_in">console</span>.log(stu1);</span><br><span class="line">stu1.sayHi();</span><br></pre></td></tr></table></figure><h4 id="构造函数-Object"><a href="#构造函数-Object" class="headerlink" title="构造函数  Object"></a>构造函数  Object</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造函数  Object </span></span><br><span class="line"><span class="comment">//1. 创建空对象  : new 创建对象</span></span><br><span class="line"><span class="keyword">var</span> obj1 = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"><span class="built_in">console</span>.log(obj1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 创建一个有内容的对象</span></span><br><span class="line"><span class="keyword">var</span> obj2 =  <span class="keyword">new</span> <span class="built_in">Object</span>(&#123; <span class="attr">name</span> : <span class="string">'zs'</span>&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(obj2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 了解一下</span></span><br><span class="line"><span class="comment">// 底层 </span></span><br><span class="line"><span class="comment">// &#123;&#125; =&gt;  new Object()</span></span><br><span class="line"><span class="comment">// &#123;键值对&#125; = &gt;  new Object(&#123; name : 'zs'&#125;)</span></span><br><span class="line"><span class="comment">// 以后直接使用键值对的那个字面量创建对象即可</span></span><br></pre></td></tr></table></figure><h3 id="批量创建对象"><a href="#批量创建对象" class="headerlink" title="批量创建对象"></a>批量创建对象</h3><h4 id="工厂函数"><a href="#工厂函数" class="headerlink" title="工厂函数"></a>工厂函数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params"> name ,age</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 创建一个新对象</span></span><br><span class="line">    <span class="comment">// 每次创建虽然属性都是一样的,但是分配的空间地址不一样</span></span><br><span class="line">    <span class="comment">// 不是同一个对象</span></span><br><span class="line">    <span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 给这个新对象添加属性/方法</span></span><br><span class="line">    obj.name = name;</span><br><span class="line">    obj.age = age;</span><br><span class="line">    obj.sayHi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'哈哈'</span>+<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 返回出去</span></span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建一个 zs 对象</span></span><br><span class="line">    <span class="keyword">var</span> zs =   createPerson(<span class="string">'zs'</span>,<span class="number">18</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(zs);</span><br></pre></td></tr></table></figure><blockquote><p>优点：可以同时创建多个对象</p><p>缺点：创建出来的没有具体的类型，都是object类型的</p></blockquote><h4 id="自定义构造函数"><a href="#自定义构造函数" class="headerlink" title="自定义构造函数"></a>自定义构造函数</h4><blockquote><p>工厂函数的缺点 就是无法确定对象的具体类型</p></blockquote><blockquote><p>构造函数 ，是一种特殊的函数。主要用来在创建对象时初始化对象， 即为对象成员变量赋初始值，总与new运算符一起使用在创建对象的语句中。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//所有创建出来的对象都有：</span></span><br><span class="line">  <span class="comment">//name</span></span><br><span class="line">  <span class="comment">//age</span></span><br><span class="line">  <span class="comment">//hobboy</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Teacher</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//构造函数内部的this指向的是新创建的那个对象</span></span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> tea = <span class="keyword">new</span> Teacher(<span class="string">"zs"</span>, <span class="number">18</span>);</span><br><span class="line"><span class="built_in">console</span>.log(tea);</span><br></pre></td></tr></table></figure><blockquote><p>构造函数首字母要大写（推荐做法）。<br>构造函数要和new一起使用才有意义。<br>构造函数的作用是用于实例化一个对象，即给对象添加属性和方法。</p></blockquote><p><strong>new在执行时会做四件事情</strong> </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span>会做<span class="number">4</span>件事情</span><br><span class="line"><span class="comment">//1. new会创建一个新的空对象，类型是Teacher</span></span><br><span class="line"><span class="comment">//2. new 会让this指向这个新的对象 </span></span><br><span class="line"><span class="comment">//3. 执行构造函数  目的：给这个新对象加属性和方法</span></span><br><span class="line"><span class="comment">//4. new会返回这个新对象</span></span><br><span class="line"></span><br><span class="line">构造函数的作用(实例化对象)： </span><br><span class="line">  给创建出来的对象增加属性和方法。</span><br></pre></td></tr></table></figure><h3 id="查看一个对象的类型"><a href="#查看一个对象的类型" class="headerlink" title="查看一个对象的类型"></a>查看一个对象的类型</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> 只能判断基本数据类型的类型</span><br><span class="line"><span class="keyword">instanceof</span> 判断对象的具体类型</span><br><span class="line"><span class="keyword">constructor</span>.name 也可以获取到对象的具体类型</span><br></pre></td></tr></table></figure><p><strong>关于typeof</strong></p><blockquote><p>typeof用于查看基本的数据类型， number string boolean undefined<br>typeof如果查看复杂数据类型，返回的都是object类型。<br>typeof null比较特殊，结果是object<br>typeof 函数的结果是function:因为函数是一等公民</p></blockquote>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 简单类型</span></span><br><span class="line">    <span class="keyword">var</span> num1 = <span class="number">12</span>;</span><br><span class="line">    <span class="keyword">var</span> num2 = <span class="string">'abc'</span>;</span><br><span class="line">    <span class="keyword">var</span> num3 = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">var</span> num4 = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="keyword">var</span> num5 = <span class="literal">null</span>;   <span class="comment">//(object类型) </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 复杂类型 (引用类型)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">num6</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> num7  =  [];</span><br><span class="line"><span class="keyword">var</span> num8 = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式1 : typeof</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> num1);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> num2);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> num3);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> num4);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> num5);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> num6);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> num7);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> num8);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// typeof 总结 :</span></span><br><span class="line"><span class="comment">//1. 简单基本类型 : number string boolean undefined </span></span><br><span class="line"><span class="comment">//2.                null =&gt; object </span></span><br><span class="line"><span class="comment">//3. 复杂类型    : object</span></span><br><span class="line"><span class="comment">//4.                 函数 =&gt; fuction 一等公民</span></span><br></pre></td></tr></table></figure><p> <strong>方式2 : instanceof 判断</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">结构 : 对象 <span class="keyword">instanceof</span> 构造函数</span><br><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log( arr <span class="keyword">instanceof</span> <span class="built_in">Array</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log( obj1 <span class="keyword">instanceof</span> <span class="built_in">Object</span>);<span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log( fn <span class="keyword">instanceof</span> <span class="built_in">Function</span>);<span class="comment">// true</span></span><br></pre></td></tr></table></figure><p> <strong>方式3 : constructor.name</strong> （直接获取）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原型的构造函数    </span></span><br><span class="line"><span class="built_in">console</span>.log(arr.constructor.name); <span class="comment">//Array</span></span><br><span class="line"><span class="built_in">console</span>.log(obj1.constructor.name); <span class="comment">//Object</span></span><br><span class="line"><span class="built_in">console</span>.log(fn.constructor.name); <span class="comment">//Function</span></span><br></pre></td></tr></table></figure><h3 id="语法-—–-对象名-属性名-看似变量-不是字符串"><a href="#语法-—–-对象名-属性名-看似变量-不是字符串" class="headerlink" title=".语法    —– 对象名.属性名 ( 看似变量,不是字符串 )"></a>.语法    —– 对象名.属性名 ( 看似变量,不是字符串 )</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取对象属性的语法：</span></span><br><span class="line"><span class="comment">// 对象.属性：对象的属性</span></span><br><span class="line">    <span class="comment">// 1. 如果有这个属性，直接返回属性值</span></span><br><span class="line">    <span class="comment">// 2. 如果没有这个属性，返回undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置对象的属性的语法</span></span><br><span class="line">    <span class="comment">// 对象.属性 = 值</span></span><br><span class="line">    <span class="comment">// 1. 如果对象有这个属性，修改这个属性</span></span><br><span class="line">    <span class="comment">// 2. 如果对象没有这个属性，添加这个属性</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name : <span class="string">'zs'</span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log ( obj.name ) <span class="comment">//ok</span></span><br><span class="line"><span class="built_in">console</span>.log ( obj.<span class="string">'name'</span> ) <span class="comment">// X</span></span><br><span class="line">obj.name = <span class="string">'小哥'</span>; <span class="comment">//ok</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> key = <span class="string">'name'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log ( obj.key ) <span class="comment">// X</span></span><br></pre></td></tr></table></figure><h3 id="语法-—-对象名-属性字符串-字符串"><a href="#语法-—-对象名-属性字符串-字符串" class="headerlink" title="[]语法   —-  对象名 [ 属性字符串 ]  (字符串)"></a>[]语法   —-  对象名 [ 属性字符串 ]  (字符串)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> key = <span class="string">'name'</span>;</span><br><span class="line"><span class="built_in">console</span>.log ( obj[<span class="string">'name'</span>] ) <span class="comment">// ok</span></span><br><span class="line"><span class="built_in">console</span>.log ( obj[name] ) <span class="comment">// X</span></span><br><span class="line"><span class="built_in">console</span>.log ( obj[key] ) <span class="comment">//ok</span></span><br><span class="line"><span class="comment">//中括号内[会自动解析变量为字符串]</span></span><br></pre></td></tr></table></figure><blockquote><p>二者的区别：当属性名是一个字符串存储在变量中的时候，只能使用关联数组的方式。</p></blockquote><blockquote><p>应用场景 : 遍历对象</p></blockquote><h2 id="遍历对象"><a href="#遍历对象" class="headerlink" title="遍历对象"></a>遍历对象</h2><blockquote><p>通过for..in语法可以遍历一个对象</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line"> <span class="comment">// 键</span></span><br><span class="line"> <span class="built_in">console</span>.log(key);</span><br><span class="line"> <span class="comment">// 值</span></span><br><span class="line"> <span class="built_in">console</span>.log(obj[key]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">解析</span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">obj[i] = i * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(key + <span class="string">"=="</span> + obj[key]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="判断一个属性是否是对象的一个属性"><a href="#判断一个属性是否是对象的一个属性" class="headerlink" title="判断一个属性是否是对象的一个属性"></a>判断一个属性是否是对象的一个属性</h3><blockquote><p>结构 : </p></blockquote>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (属性名  <span class="keyword">in</span>  对象) &#123; .. &#125;</span><br></pre></td></tr></table></figure><blockquote><p>代码</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">name: <span class="string">'zs'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="string">'name'</span> <span class="keyword">in</span> obj) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'是'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取对象里的所有属性"><a href="#获取对象里的所有属性" class="headerlink" title="获取对象里的所有属性"></a>获取对象里的所有属性</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 结构 :   Object.keys(对象)</span></span><br><span class="line"><span class="built_in">Object</span>.keys(obj)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取对象里的所有属性</span></span><br><span class="line"><span class="comment">// 结构 :  Object.keys(对象名)</span></span><br><span class="line"><span class="comment">// 返回的是一个数组 属性名字符串</span></span><br><span class="line"><span class="built_in">console</span>.log(  <span class="built_in">Object</span>.keys(obj)  );</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端笔记 </category>
          
          <category> js基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>在线手册和优质js项目</title>
      <link href="/2018/12/30/%E5%9C%A8%E7%BA%BF%E6%89%8B%E5%86%8C/"/>
      <url>/2018/12/30/%E5%9C%A8%E7%BA%BF%E6%89%8B%E5%86%8C/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th align="center">在线手册和优质js项目</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"><a href="https://cn.vuejs.org/" target="_blank" rel="noopener">Vue</a></td><td align="center">是一套构建用户界面的渐进式框架。</td></tr><tr><td align="center"><a href="https://www.jquery123.com/" target="_blank" rel="noopener">jQuery API </a></td><td align="center">是一个 JavaScript 库</td></tr><tr><td align="center"><a href="https://www.runoob.com/tags/html-reference.html" target="_blank" rel="noopener">HTML在线手册 </a></td><td align="center">HTML在线手册</td></tr><tr><td align="center"><a href="http://css.doyoe.com/" target="_blank" rel="noopener">CSS参考手册 </a></td><td align="center">CSS参考手册</td></tr><tr><td align="center"><a href="http://es6.ruanyifeng.com/" target="_blank" rel="noopener">ECMAScript 6 入门</a></td><td align="center">阮一峰es6入门</td></tr><tr><td align="center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/" target="_blank" rel="noopener">微信小程序 </a></td><td align="center">微信小程序官方开发文档</td></tr><tr><td align="center"><a href="https://progit.bootcss.com/" target="_blank" rel="noopener">Pro Git </a></td><td align="center">Pro Git 中文版（第二版）是一本详细的 Git 指南</td></tr><tr><td align="center"><a href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="noopener">Git教程 - 廖雪峰的官方网站 </a></td><td align="center">Git教程 - 廖雪峰的官方网站</td></tr><tr><td align="center"><a href="https://www.bootcss.com/p/git-guide/" target="_blank" rel="noopener">Git Guide </a></td><td align="center">Git 简易指南</td></tr><tr><td align="center"><a href="https://chartjs.bootcss.com/" target="_blank" rel="noopener">Chart.js </a></td><td align="center">开源的 HTML5 图表工具</td></tr><tr><td align="center"><a href="http://momentjs.cn/" target="_blank" rel="noopener">Moment.js </a></td><td align="center">JavaScript 日期处理类库</td></tr></tbody></table><a id="more"></a><table><thead><tr><th align="center">在线手册和优质js项目</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"><a href="http://mockjs.com/" target="_blank" rel="noopener">Mock.js </a></td><td align="center">生成随机数据，拦截 Ajax 请求</td></tr><tr><td align="center"><a href="[https://www.easy-mock.com](https://www.easy-mock.com/)">easy mock </a></td><td align="center">能快速生成模拟数据的服务</td></tr><tr><td align="center"><a href="https://www.sasscss.com/" target="_blank" rel="noopener">Sass</a></td><td align="center">最流行的 CSS 扩展语言解析器</td></tr><tr><td align="center"><a href="https://www.bootcss.com/p/lesscss/" target="_blank" rel="noopener">LESS </a></td><td align="center">一种动态样式语言</td></tr><tr><td align="center"><a href="https://www.webpackjs.com/" target="_blank" rel="noopener">Webpack</a></td><td align="center">是前端资源模块化管理和打包工具</td></tr><tr><td align="center"><a href="https://www.bootcss.com/" target="_blank" rel="noopener">Bootstrap </a></td><td align="center">简洁、直观、强悍的前端开发框架，让web开发更迅速、简单。</td></tr><tr><td align="center"><a href="http://fontawesome.dashgame.com/" target="_blank" rel="noopener">Font Awesome</a></td><td align="center">一套绝佳的图标字体库和CSS框架</td></tr><tr><td align="center"><a href="https://www.iconfont.cn/" target="_blank" rel="noopener">Icon<em>font</em>-<em>阿里巴巴</em>矢量图标库</a></td><td align="center">国内功能很强大且图标内容很丰富的矢量图标库</td></tr><tr><td align="center"><a href="https://daneden.github.io/animate.css/" target="_blank" rel="noopener"><em>css</em> 动画:<em>animate.css</em></a></td><td align="center">Just-add-water CSS animations</td></tr><tr><td align="center"><a href="http://www.jq22.com/jquery-info819" target="_blank" rel="noopener">一款强大的预设css3动画库</a></td><td align="center">一款强大的预设css3动画库</td></tr><tr><td align="center"><a href="https://www.babeljs.cn/" target="_blank" rel="noopener">Babel </a></td><td align="center">是一个 JavaScript 编译器。</td></tr><tr><td align="center"><a href="https://www.nodeapp.cn/" target="_blank" rel="noopener">Node.js</a></td><td align="center">Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。</td></tr><tr><td align="center"><a href="https://www.koajs.com.cn/" target="_blank" rel="noopener">Koa (koajs)</a></td><td align="center">基于 Node.js 平台的下一代 web 开发框架</td></tr><tr><td align="center"><a href="https://www.npmjs.cn/" target="_blank" rel="noopener">NPM </a></td><td align="center">NPM（node package manager）是 Node.js 世界的包管理器。</td></tr><tr><td align="center">artTemplate</td><td align="center"></td></tr><tr><td align="center">template.js</td><td align="center"></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 前端总结 </category>
          
          <category> 在线手册 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
