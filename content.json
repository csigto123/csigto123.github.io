{"meta":{"title":"欢迎来到我的个人博客","subtitle":"","description":"","author":"Turnin'","url":"https://csigto123.github.io","root":"/"},"pages":[{"title":"404 Not Found","date":"2019-11-07T14:37:05.588Z","updated":"2019-09-09T06:31:42.000Z","comments":true,"path":"404.html","permalink":"https://csigto123.github.io/404.html","excerpt":"","text":"404 Not Found **很抱歉，您访问的页面不存在** 可能是输入地址有误或该地址已被删除"},{"title":"关于","date":"2019-11-07T14:16:52.677Z","updated":"2019-11-07T14:16:52.677Z","comments":true,"path":"about/index.html","permalink":"https://csigto123.github.io/about/index.html","excerpt":"","text":""},{"title":"","date":"2019-11-07T15:39:54.306Z","updated":"2019-11-07T15:39:54.306Z","comments":true,"path":"mylist/index.html","permalink":"https://csigto123.github.io/mylist/index.html","excerpt":"","text":""},{"title":"我的朋友们","date":"2019-11-07T14:37:05.573Z","updated":"2019-09-09T06:31:42.000Z","comments":true,"path":"friends/index.html","permalink":"https://csigto123.github.io/friends/index.html","excerpt":"","text":"各位大佬想交换友链的话可以在下方留言，必须要有名称、头像链接、和至少一个标签哦～ 名称： xaoxuu’s blog头像： https://img.vim-cn.com/76/c339fd7092750f472da9ad17bd7c0081a1f0e2.jpg网址： https://xaoxuu.com/blog/标签： iOS"},{"title":"","date":"2019-11-07T14:37:05.583Z","updated":"2019-09-09T06:31:42.000Z","comments":true,"path":"projects/index.html","permalink":"https://csigto123.github.io/projects/index.html","excerpt":"","text":""},{"title":"所有分类","date":"2019-11-07T14:37:16.212Z","updated":"2019-09-09T06:31:42.000Z","comments":true,"path":"blog/categories/index.html","permalink":"https://csigto123.github.io/blog/categories/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2019-11-07T14:19:46.901Z","updated":"2019-11-07T14:19:46.901Z","comments":true,"path":"blog/tags/index.html","permalink":"https://csigto123.github.io/blog/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"常见命名中英文对照","slug":"常见命名中英文对照","date":"2019-03-16T16:00:00.000Z","updated":"2019-11-26T13:08:12.794Z","comments":true,"path":"2019/03/17/常见命名中英文对照/","link":"","permalink":"https://csigto123.github.io/2019/03/17/%E5%B8%B8%E8%A7%81%E5%91%BD%E5%90%8D%E4%B8%AD%E8%8B%B1%E6%96%87%E5%AF%B9%E7%85%A7/","excerpt":"常见命名中英文对照 英语 中文 container 最外层容器 layout 布局 header,head 页头 foot, footer 页脚 title 标题 summary 总结 search 搜索 list 列表 banner 广告条 menu 菜单 nav 导航 未完…… 未完……","text":"常见命名中英文对照 英语 中文 container 最外层容器 layout 布局 header,head 页头 foot, footer 页脚 title 标题 summary 总结 search 搜索 list 列表 banner 广告条 menu 菜单 nav 导航 未完…… 未完……","categories":[{"name":"前端总结","slug":"前端总结","permalink":"https://csigto123.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E6%80%BB%E7%BB%93/"}],"tags":[]},{"title":"前端笔记--js基础笔记","slug":"js基础笔记","date":"2018-12-29T16:00:00.000Z","updated":"2019-11-09T18:27:43.557Z","comments":true,"path":"2018/12/30/js基础笔记/","link":"","permalink":"https://csigto123.github.io/2018/12/30/js%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/","excerpt":"JavaScript基础变量的命名规则和规范规则 : ( 必须遵守的,不遵守会报错 ) 由字母、数字、下划线、$符号组成 ; 不能以数字开头 区分大小写 不能是关键字和保留字 (不用死记 , 慢慢就见多了) 12//关键字：对于js来说有特殊意义的一些单词，常见关键字：略。//保留字：js保留了一些单词，这些单词现在不用，但是以后要用。常见保留字：略","text":"JavaScript基础变量的命名规则和规范规则 : ( 必须遵守的,不遵守会报错 ) 由字母、数字、下划线、$符号组成 ; 不能以数字开头 区分大小写 不能是关键字和保留字 (不用死记 , 慢慢就见多了) 12//关键字：对于js来说有特殊意义的一些单词，常见关键字：略。//保留字：js保留了一些单词，这些单词现在不用，但是以后要用。常见保留字：略 规范 : (建议遵守的 不遵守不会报错) 变量名必须有意义 遵守驼峰命名法。 首字母小写,后面单词的首字母需要大写! myName, userPassword JS数据类型-值类型与引用类型 简单（ 基本 ）数据类型：number、string、boolean、undefined（声明未赋值）、null（空类型） 复杂（引用）数据类型：Array、function, Object 简单数据类型也叫值类型，复杂数据类型也叫引用数据类型，这主要是根据内存存储方式来区分的。 变量在存储简单类型的时候，存的是值本身（值类型） 变量在存储复杂数据类型的时候，存的是引用，也叫地址（类型） 值类型的存储 变量存储数据的时候，存储的直接就是这个值本身。 12345var num = 11;var num1 = num;num = 20;console.log(num);console.log(num1); 简单类型进行赋值的时候，赋值的是值本身。 引用类型的存储 复杂类型： 变量不会存这个对象，对象随机存在内存中，会有一个地址，变量存储的仅仅是这个对象的地址。 1234567891011var obj = &#123; name:\"zs\", age:18&#125;var obj1 = obj;obj1.name = \"ls\";console.log(obj.name);console.log(obj1.name);////把obj存的地址给了obj1 所以obj和obj1都存放了这个对象的地址， 结论：简单类型存储的是值本身，复杂类型存储的是地址，引入如果把第一个对象赋值给另一个变量，此时两个变量会指向同一个对象。 类型转换转数字类型方法一：Number(值) 12console.log(Number('55'));Number()可以把任意值转换成数值类型，但是如果字符串中有不是数字的字符，返回NaN 方法二：parseInt(值) 和 parseFloat(值) parseInt(值) 把整数或者小数都转化为整数; parseInt(值) : parse:解析 int:整数/整型 =&gt; 数字类型 如果是整数 =&gt; 整数 如果是浮点数 =&gt; 整数 (小点数以后全部省略) parseFloat(值) 把整数转化整数,把小数转化为小数 float : 浮点数 =&gt; 数字类型 如果是整数 =&gt; 整数 如果是浮点数 =&gt;浮点数 1234567var num1 = parseInt(\"12\"); // 12var num1 = parseInt(\"12.3\"); //12var num1 = parseFloat(\"12\"); //12var num1 = parseFloat(\"12.3\");//12.3var num1 = parseInt(\"12.3abc\"); // 返回12，如果第一个字符是数字会解析知道遇到非数字结束var num2 = parseInt(\"abc123\"); // 返回NaN，如果第一个字符不是数字或者符号就返回NaN 方法三：算术运算 (最常用) + (正) -0 1234var str = '500';console.log(+str); // 取正console.log(-str); // 取负console.log(str - 0); +0呢???拼接 转字符串类型方法一：String ( ) 123var num = 5;num = String(num);console.log(num); 方法二：toString ( ) 123var num = 5;console.log(num.toString());// 把数值5变成字符串5//将来所有的数据都会有toString()方法，除了null和undefined 方法三：拼串，(最常用) 123var num = 5;num = num + \"\";console.log(num); 转换成布尔类型 所有的值都可以转换成布尔类型 其中 0, &quot;&quot;, undefined，null， NaN，这几个值会转换成false，其他值都会转换成true 这个代表的五大基本类型 12345678// 没有值 =&gt; false// 有值 =&gt; true// number string undefined null // 0 '' 注意 : 1. 'false' 它是字符串 2. NaN =&gt; false 方法Boolean() 12console.log(Boolean(1));console.log(Boolean(0)); 分支语句 : 三元运算符1234条件 ? 值1 : 值2 /*或者*/ 条件 ? 表达式1 : 表达式2 1. 三元运算符会得到一个结果，结果根据`条件`来确定。2. 如果`条件`的值为true，会返回表达式1的值/值13. 如果`条件`的值为false，会返回表达式2的值/值2 分支语句 :switch语句 if..else适用于范围的判断，switch..case适用于具体的值的判断 语法格式 : switch case break default 123456789101112131415switch (变量) &#123; case 值1: 语句1; break; case 值2: 语句2; break; case 值3: 语句3; break; … default: 默认语句; break;&#125; 注意 : 12break可以省略，如果省略，代码会继续执行下一个caseswitch 语句在比较值时使用的是全等操作符, 因此不会发生类型转换（例如，字符串'10' 不等于数值 10） break和continue break: 结束/中止for循环 ​ 立即跳出当前整个循环，即循环结束，开始执行循环后面的内容（直接跳传出大括号） ​ 一般写在打印之后 continue: 结束本次循环,进行下一个循环 ​ 立即跳出当前循环，继续下一次循环（跳到i++的地方） (放打印代码前面) ​ 一般写在打印之前、 数组 Arrar() 里面放一个值,代表的是创建一个长度为4的空数组var arr3 = new Array(4);console.log(arr3); var arr3 = [4]; // 创建一个数组,元素只有1个,,,元素是4 数组常用方法总结略 函数 break : 中止 for循环return 中止函数 并且返回一个值 作用域 全局变量：在函数外，script标签内声明的变量就是全局变量，全局变量在任何地方都能访问的到。局部变量：在函数中声明的变量，就是局部变量，局部变量只有在当前函数体内能够访问。隐式全局变量：没有使用var定义的变量也是全局变量，叫做隐式全局变量。(不要使用) 预解析 总结 : var 声明的变量,,,把声明提升到当前作用域的最前面赋值不提升 函数整体提升到当前作用域的最前面 函数同名,,后者会覆盖前者 变量 和 函数 同名,,函数优先 代码一行一行执行 匿名函数 匿名函数 没有函数名的函数自执行/自调用(1次)结构 : ( 匿名函数 ) ()第一个括号 : 匿名函数保护起来第二个小括号 : 调用 对象 创建对象 =&gt; 4种方式单独创建对象 =&gt; 2种 字面量 构造函数Object批量创建对象 =&gt; 2种 工厂函数 自定义构造函数 单独创建对象字面量创建对象12345678910111213141516171819202122// 字面量创建对象// var 对象名 = &#123; 键值对 &#125;// 字面量 =&gt; 直接量 =&gt;一眼就能看出来什么类型// 12 'abc' true [] &#123;&#125; function//1. 创建一个空对象var obj1 = &#123;&#125;;console.log(obj1);//2. 创建有内容的对象var obj2 = &#123; name : '哈哈', age : 18, hobby : function () &#123; // 哈哈爱代码 console.log( this.name + '爱代码'); &#125;&#125;// . '的' // obj2.hobby(); 1234567891011var stu1 = &#123; name :'张三', age : 18, sayHi: function () &#123; console.log('大家好,我是'+ this.name); &#125;&#125;//1. this 在函数内部 才有意义//2. 指向 : 谁调用this所在的这个函数, this就指向哪个对象console.log(stu1);stu1.sayHi(); 构造函数 Object1234567891011121314// 构造函数 Object //1. 创建空对象 : new 创建对象var obj1 = new Object();console.log(obj1);//2. 创建一个有内容的对象var obj2 = new Object(&#123; name : 'zs'&#125;);console.log(obj2);// 了解一下// 底层 // &#123;&#125; =&gt; new Object()// &#123;键值对&#125; = &gt; new Object(&#123; name : 'zs'&#125;)// 以后直接使用键值对的那个字面量创建对象即可 批量创建对象工厂函数12345678910111213141516171819202122function createPerson( name ,age) &#123; //1. 创建一个新对象 // 每次创建虽然属性都是一样的,但是分配的空间地址不一样 // 不是同一个对象 var obj = &#123;&#125;; //2. 给这个新对象添加属性/方法 obj.name = name; obj.age = age; obj.sayHi = function () &#123; console.log('哈哈'+this.name);&#125; //3. 返回出去 return obj;&#125; //创建一个 zs 对象 var zs = createPerson('zs',18); console.log(zs); 优点：可以同时创建多个对象 缺点：创建出来的没有具体的类型，都是object类型的 自定义构造函数 工厂函数的缺点 就是无法确定对象的具体类型 构造函数 ，是一种特殊的函数。主要用来在创建对象时初始化对象， 即为对象成员变量赋初始值，总与new运算符一起使用在创建对象的语句中。 123456789101112//所有创建出来的对象都有： //name //age //hobboyfunction Teacher(name, age) &#123; //构造函数内部的this指向的是新创建的那个对象 this.name = name; this.age = age;&#125;var tea = new Teacher(\"zs\", 18);console.log(tea); 构造函数首字母要大写（推荐做法）。构造函数要和new一起使用才有意义。构造函数的作用是用于实例化一个对象，即给对象添加属性和方法。 new在执行时会做四件事情 12345678new会做4件事情//1. new会创建一个新的空对象，类型是Teacher//2. new 会让this指向这个新的对象 //3. 执行构造函数 目的：给这个新对象加属性和方法//4. new会返回这个新对象构造函数的作用(实例化对象)： 给创建出来的对象增加属性和方法。 查看一个对象的类型123typeof 只能判断基本数据类型的类型instanceof 判断对象的具体类型constructor.name 也可以获取到对象的具体类型 关于typeof typeof用于查看基本的数据类型， number string boolean undefinedtypeof如果查看复杂数据类型，返回的都是object类型。typeof null比较特殊，结果是objecttypeof 函数的结果是function:因为函数是一等公民 123456789101112131415161718192021222324252627282930// 简单类型 var num1 = 12; var num2 = 'abc'; var num3 = true; var num4 = undefined; var num5 = null; //(object类型) // 复杂类型 (引用类型)function num6() &#123;&#125;var num7 = [];var num8 = &#123;&#125;;// 方式1 : typeofconsole.log(typeof num1);console.log(typeof num2);console.log(typeof num3);console.log(typeof num4);console.log(typeof num5);console.log(typeof num6);console.log(typeof num7);console.log(typeof num8);// typeof 总结 ://1. 简单基本类型 : number string boolean undefined //2. null =&gt; object //3. 复杂类型 : object//4. 函数 =&gt; fuction 一等公民 方式2 : instanceof 判断 1234567结构 : 对象 instanceof 构造函数var arr = [];var obj = &#123;&#125;var fn = function () &#123;&#125;console.log( arr instanceof Array); // trueconsole.log( obj1 instanceof Object);// trueconsole.log( fn instanceof Function);// true 方式3 : constructor.name （直接获取） 1234// 原型的构造函数 console.log(arr.constructor.name); //Arrayconsole.log(obj1.constructor.name); //Objectconsole.log(fn.constructor.name); //Function .语法 —– 对象名.属性名 ( 看似变量,不是字符串 )123456789101112131415161718192021// 获取对象属性的语法： // 对象.属性：对象的属性 // 1. 如果有这个属性，直接返回属性值 // 2. 如果没有这个属性，返回undefined// 设置对象的属性的语法 // 对象.属性 = 值 // 1. 如果对象有这个属性，修改这个属性 // 2. 如果对象没有这个属性，添加这个属性var obj = &#123; name : 'zs'&#125; console.log ( obj.name ) //okconsole.log ( obj.'name' ) // Xobj.name = '小哥'; //okvar key = 'name';console.log ( obj.key ) // X []语法 —- 对象名 [ 属性字符串 ] (字符串)12345var key = 'name';console.log ( obj['name'] ) // okconsole.log ( obj[name] ) // Xconsole.log ( obj[key] ) //ok//中括号内[会自动解析变量为字符串] 二者的区别：当属性名是一个字符串存储在变量中的时候，只能使用关联数组的方式。 应用场景 : 遍历对象 遍历对象 通过for..in语法可以遍历一个对象 123456for (var key in obj) &#123; // 键 console.log(key); // 值 console.log(obj[key]);&#125; 12345678解析var obj = &#123;&#125;;for (var i = 0; i &lt; 10; i++) &#123; obj[i] = i * 2;&#125;for(var key in obj) &#123; console.log(key + \"==\" + obj[key]);&#125; 判断一个属性是否是对象的一个属性 结构 : 1if (属性名 in 对象) &#123; .. &#125; 代码 123456var obj = &#123; name: 'zs'&#125;if ('name' in obj) &#123; console.log('是');&#125; 获取对象里的所有属性1234567// 结构 : Object.keys(对象)Object.keys(obj)// 获取对象里的所有属性// 结构 : Object.keys(对象名)// 返回的是一个数组 属性名字符串console.log( Object.keys(obj) );","categories":[{"name":"前端笔记","slug":"前端笔记","permalink":"https://csigto123.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"},{"name":"js基础","slug":"前端笔记/js基础","permalink":"https://csigto123.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/js%E5%9F%BA%E7%A1%80/"}],"tags":[]},{"title":"置顶：博客源码","slug":"top","date":"2018-12-29T16:00:00.000Z","updated":"2019-09-09T06:31:42.000Z","comments":true,"path":"2018/12/30/top/","link":"","permalink":"https://csigto123.github.io/2018/12/30/top/","excerpt":"文章的Front-matter填写top: true就置顶了。 1top: true 这是一个示例博客。源码目录：https://github.com/xaoxuu/blog-example","text":"文章的Front-matter填写top: true就置顶了。 1top: true 这是一个示例博客。源码目录：https://github.com/xaoxuu/blog-example 没有更多了哦。","categories":[{"name":"教程","slug":"教程","permalink":"https://csigto123.github.io/blog/categories/%E6%95%99%E7%A8%8B/"}],"tags":[]},{"title":"在线手册和优质js项目","slug":"在线手册","date":"2018-12-29T16:00:00.000Z","updated":"2019-11-26T13:07:50.957Z","comments":true,"path":"2018/12/30/在线手册/","link":"","permalink":"https://csigto123.github.io/2018/12/30/%E5%9C%A8%E7%BA%BF%E6%89%8B%E5%86%8C/","excerpt":"在线手册和优质js项目 说明 Vue 是一套构建用户界面的渐进式框架。 jQuery API 是一个 JavaScript 库 HTML在线手册 HTML在线手册 CSS参考手册 CSS参考手册 ECMAScript 6 入门 阮一峰es6入门 微信小程序 微信小程序官方开发文档 Pro Git Pro Git 中文版（第二版）是一本详细的 Git 指南 Git教程 - 廖雪峰的官方网站 Git教程 - 廖雪峰的官方网站 Git Guide Git 简易指南 Chart.js 开源的 HTML5 图表工具 Moment.js JavaScript 日期处理类库","text":"在线手册和优质js项目 说明 Vue 是一套构建用户界面的渐进式框架。 jQuery API 是一个 JavaScript 库 HTML在线手册 HTML在线手册 CSS参考手册 CSS参考手册 ECMAScript 6 入门 阮一峰es6入门 微信小程序 微信小程序官方开发文档 Pro Git Pro Git 中文版（第二版）是一本详细的 Git 指南 Git教程 - 廖雪峰的官方网站 Git教程 - 廖雪峰的官方网站 Git Guide Git 简易指南 Chart.js 开源的 HTML5 图表工具 Moment.js JavaScript 日期处理类库 在线手册和优质js项目 说明 Mock.js 生成随机数据，拦截 Ajax 请求 easy mock 能快速生成模拟数据的服务 Sass 最流行的 CSS 扩展语言解析器 LESS 一种动态样式语言 Webpack 是前端资源模块化管理和打包工具 Bootstrap 简洁、直观、强悍的前端开发框架，让web开发更迅速、简单。 Font Awesome 一套绝佳的图标字体库和CSS框架 Iconfont-阿里巴巴矢量图标库 国内功能很强大且图标内容很丰富的矢量图标库 css 动画:animate.css Just-add-water CSS animations 一款强大的预设css3动画库 一款强大的预设css3动画库 Babel 是一个 JavaScript 编译器。 Node.js Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。 NPM NPM（node package manager）是 Node.js 世界的包管理器。 artTemplate template.js","categories":[{"name":"前端总结，手册","slug":"前端总结，手册","permalink":"https://csigto123.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E6%80%BB%E7%BB%93%EF%BC%8C%E6%89%8B%E5%86%8C/"}],"tags":[]},{"title":"hexo.sh","slug":"https://xaoxuu.com/wiki/hexo.sh/","date":"2018-08-08T16:00:00.000Z","updated":"2019-04-03T16:00:00.000Z","comments":true,"path":"2018/08/09/https://xaoxuu.com/wiki/hexo.sh//","link":"","permalink":"https://csigto123.github.io/2018/08/09/https:/xaoxuu.com/wiki/hexo.sh/","excerpt":"一个方便管理与发布hexo博客的脚本。","text":"一个方便管理与发布hexo博客的脚本。","categories":[{"name":"Dev","slug":"Dev","permalink":"https://csigto123.github.io/blog/categories/Dev/"},{"name":"Hexo","slug":"Dev/Hexo","permalink":"https://csigto123.github.io/blog/categories/Dev/Hexo/"}],"tags":[{"name":"shell","slug":"shell","permalink":"https://csigto123.github.io/blog/tags/shell/"},{"name":"Hexo","slug":"Hexo","permalink":"https://csigto123.github.io/blog/tags/Hexo/"}],"author":{"name":"xaoxuu","avatar":"https://cdn.jsdelivr.net/gh/xaoxuu/assets@master/avatar/avatar.png","url":"https://xaoxuu.com"}},{"title":"【转】如何搭建基于Hexo的独立博客","slug":"http://uksir.gitee.io/docs/Home/codes.html","date":"2017-07-04T16:00:00.000Z","updated":"2019-11-26T10:15:10.891Z","comments":true,"path":"2017/07/05/http://uksir.gitee.io/docs/Home/codes.html/","link":"","permalink":"https://csigto123.github.io/2017/07/05/http:/uksir.gitee.io/docs/Home/codes.html/","excerpt":"","text":"sdfasfas fasfasd","categories":[{"name":"Dev","slug":"Dev","permalink":"https://csigto123.github.io/blog/categories/Dev/"},{"name":"Hexo","slug":"Dev/Hexo","permalink":"https://csigto123.github.io/blog/categories/Dev/Hexo/"}],"tags":[],"author":{"name":"xaoxuu","avatar":"https://cdn.jsdelivr.net/gh/xaoxuu/assets@master/avatar/avatar.png"}}]}